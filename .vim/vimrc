set nocompatible

call pathogen#runtime_append_all_bundles()
call pathogen#helptags()

filetype on
filetype plugin on
filetype indent on

syntax on

set backspace=indent,eol,start
set history=1000
set showcmd
set showmode
set incsearch
set hlsearch
set nowrap
set linebreak
set winwidth=84
set winheight=5
set winminheight=5
set winheight=999
set undodir=~/.tmp
set undofile
set undolevels=1000
set undoreload=10000
set backupdir=~/.tmp
set directory=~/.tmp
set backup
set shiftwidth=4
set softtabstop=4
set expandtab
set autoindent
set nofoldenable
set foldmethod=indent
set foldlevelstart=1
set foldlevel=1
set wildmode=list:longest
set wildmenu
set wildignore=*.o,*.obj,*~,_site,.git,.svn,*.xcodeproj,*.pyc
set nolist
" set listchars=tab:▷⋅,trail:⋅,nbsp:⋅
set formatoptions-=o
set scrolloff=3
set sidescrolloff=7
set sidescroll=1
set mouse=a
set ttymouse=xterm2
set t_Co=256
set hidden
set textwidth=79
set ignorecase
set dictionary-=/usr/share/dict/words dictionary+=/usr/share/dict/words
set complete-=k
set cursorline
set nu
" set nuw=5
set timeoutlen=200
set laststatus=2
set showtabline=2
set diffopt=filler
set diffopt+=iwhite
set switchbuf=useopen

if has("gui")
  set go-=T
  set guioptions-=L
  set guioptions-=r
  set guioptions+=c
  set noantialias
  set columns=111
  set lines=69
  autocmd FileType ruby,eruby set noballooneval
  set noballooneval
endif

if has("mac")
  set clipboard=unnamed
  let g:gist_clip_command = 'pbcopy'
else
  let g:gist_clip_command = 'xclip -selection clipboard'
endif

if has("gui") && has("mac")
  set fuopt+=maxhorz
  set macmeta
  set antialias | set guifont=Inconsolata:h14
endif

if has("gui") && !has("mac")
  set guifont=Inconsolata\ 12
endif

set statusline=%f
set statusline+=%{exists('g:loaded_fugitive')?fugitive#statusline():''}
set statusline+=%{exists('g:loaded_rvm')?rvm#statusline():''}
set statusline+=%#warningmsg#
set statusline+=%{&ff!='unix'?'['.&ff.']':''}
set statusline+=%*
set statusline+=%#warningmsg#
set statusline+=%{(&fenc!='utf-8'&&&fenc!='')?'['.&fenc.']':''}
set statusline+=%*
set statusline+=%h
set statusline+=%y
set statusline+=%r
set statusline+=%m
set statusline+=%#error#
set statusline+=%*
set statusline+=%#warningmsg#
set statusline+=%{SyntasticStatuslineFlag()}
set statusline+=%*
set statusline+=%#error#
set statusline+=%{&paste?'[paste]':''}
set statusline+=%*
set statusline+=%=
set statusline+=%c,
set statusline+=%l/%L
set statusline+=\ %P

let g:CSApprox_verbose_level = 0
if !has("gui")
  let g:CSApprox_loaded = 1
endif

" compiler ruby
" let ruby_fold = 1
let g:rails_menu=0
let g:rails_installed_menu=0
let g:syntastic_enable_signs=1
let g:syntastic_auto_jump=1
let g:syntastic_auto_loc_list=1
let g:snips_author = "Travis Jeffery"
let g:NERDTreeWinPos="right"
let g:mapleader=","
let g:quickrun_direction = 'rightbelow vertical'
let g:user_zen_leader_key = '<c-e>'
let g:use_zen_complete_tag = 1
let g:ragtag_global_maps = 1
let g:user_zen_settings = {
      \  'indentation' : '  ',
      \   'markdown' : { 'extends' : 'html' }
      \}
let g:delimitMate_expand_cr = 1
let g:delimitMate_expand_space = 1
let delimitMate_balance_matchpairs = 1
let delimitMate_smart_quotes = 0
let delimitMate_smart_matchpairs = 0
let delimitMate_autoclose = 0
let g:yankring_max_history = 1000
let g:yankring_max_display = 100
let g:yankring_persist = 1
let g:yankring_share_between_instances = 1
let g:yankring_window_use_separate = 1
let g:yankring_window_use_horiz = 1
let g:yankring_window_auto_close = 1
let g:yankring_window_width = 30
let g:yankring_window_use_right = 1
let g:yankring_window_increment = 15
let g:yankring_history_dir = '$HOME/.tmp'
let g:surround_indent = 1
let g:rubycomplete_rails = 1
let g:HammerQuiet = 1
let g:vimfiler_as_default_explorer = 1
let g:vimfiler_safe_mode_by_default = 0
let g:SuperTabLongestEnhanced = 1
let g:SuperTabDefaultCompletionType = "context"
let g:CommandTMatchWindowReverse  = 1
let g:CommandTMaxHeight           = 10
let g:CommandTMaxFiles            = 30000
let g:CommandTScanDotDirectories  = 1
if filereadable("/usr/local/bin/ctags")
  let g:tagbar_ctags_bin="/usr/local/bin/ctags"
else
  let g:tagbar_ctags_bin="/usr/bin/ctags"
endif

set swapfile
if !isdirectory($HOME . "/.tmp")
  call mkdir($HOME . "/.tmp")
endif

if filereadable($HOME . "/.githubrc")
  source $HOME/.githubrc
endif
if filereadable($HOME . "/.passwords")
  source $HOME/.passwords
endif

autocmd FileType javascript set omnifunc=javascriptcomplete#CompleteJS
autocmd FileType html set omnifunc=htmlcomplete#CompleteTags
autocmd FileType vim set omnifunc=syntaxcomplete#Complete
autocmd FileType css set omnifunc=csscomplete#CompleteCSS
autocmd FileType xml set omnifunc=xmlcomplete#CompleteTags
autocmd FileType php set omnifunc=phpcomplete#CompletePHP
autocmd FileType c set omnifunc=ccomplete#Complete
autocmd FileType ruby,eruby set omnifunc=rubycomplete#Complete
autocmd BufNewFile,BufRead *.coffee set ft=coffee sw=2 sts=2
autocmd BufNewFile,BufRead *.css set ft=css sw=2 sts=2
autocmd BufNewFile,BufRead *.json set ft=javascript sw=2 sts=2
autocmd BufNewFile,BufRead *.rb set ft=ruby sw=2 sts=2
autocmd filetype svn,*commit*,markdown set spell
autocmd BufNewFile,BufRead *_spec.rb compiler rspec
autocmd BufNewFile,BufRead *_test.rb compiler rubyunit
autocmd BufReadPost fugitive://* set bufhidden=delete
let g:do_filetype = 0
au GUIEnter,BufAdd * if expand('<afile>') == "" | let g:do_filetype = 1 | endif
au BufEnter * if g:do_filetype | setf markdown | let g:do_filetype = 0 | endif
au BufNewFile,BufRead,BufWinEnter * if search("diff --git", 'cp', 1) | set filetype=git | endif

function! OpenChangedFiles()
  only
  let status = system('git status -s | grep "^ \?\(M\|A\)" | cut -d " " -f 3')
  let filenames = split(status, "\n")
  exec "edit " . filenames[0]
  for filename in filenames[1:]
    exec "sp " . filename
  endfor
endfunction
command! OpenChangedFiles :call OpenChangedFiles()

autocmd BufReadPost * call SetCursorPosition()
function! SetCursorPosition()
  if &filetype !~ 'svn\|commit\c'
    if line("'\"") > 0 && line("'\"") <= line("$")
      exe "normal! g`\""
      normal! zz
    endif
  end
endfunction

function! RenameFile()
  let old_name = expand('%')
  let new_name = input('New file name: ', expand('%'))
  if new_name != '' && new_name != old_name
    exec ':saveas ' . new_name
    exec ':silent !rm ' . old_name
    redraw!
  endif
endfunction

function! InlineVariable()
  normal "ayiw
  normal 4diw
  normal "bd$
  normal dd
  normal k$
  exec '/\<' . @a . '\>'
  exec ':.s/\<' . @a . '\>/' . @b
endfunction

function! JSBeautify()
  silent! exe "%! jsbeautifier --stdin"
endfunction
command! -nargs=0 JSBeautify call JSBeautify()<cr>

command! W :w
command! E :Explore
command! DiffOrig vert new | set bt=nofile | r # | 0d_ | diffthis | wincmd p | diffthis

if &diff
  nmap <c-h> :diffget 1<cr>
  nmap <c-l> :diffget 3<cr>
  nmap <c-k> [cz.
  nmap <c-j> ]cz.
  set number
endif

cabbrev E e
abbrev Utitlies Utilities
abbrev utitlies utilities
abbrev init; initialize
abbrev innit init
abbrev innitialize initialize
abbrev seperate separate
abbrev teh the

nmap <leader>tt :silent execute "!ruby % &> /tmp/vim.log &"<cr>:redraw!<cr>

nmap <silent> <C-L> :nohls<CR><C-L>
nmap <C-B> :BufExplorer<cr>
nmap <c-f> :FuzzyFinderTextMate<CR>
nmap Q gq
nmap <leader>m :TagbarToggle<cr>
nmap <leader>d :TagbarOpenAutoClose<cr>
nmap <leader>c :cnext<cr>
nmap <leader>p :cprevious<cr>
nmap <leader>z :ZoomWin<cr>
nmap <leader>= miggVG=`i
nmap <leader>v :vsplit<CR> <C-w><C-w>
nmap <leader>s :split<CR> <C-w><C-w>
nmap <leader>\ :%! fmt -w 79<CR>
vmap <leader>\ :!fmt -w 79<CR>
nmap <leader>` :%s/\s*$//ge<CR>
nmap <Leader>cd :cd %:p:h<CR>
nmap <silent> <Leader>y :YRShow<CR>
nmap <silent> <Leader>Y :GundoToggle<CR>
imap <M-o>       <Esc>o
imap <C-j>       <Down>
nmap <leader>' ""yls<c-r>={'"': "'", "'": '"'}[@"]<cr><esc>
nmap \\ <plug>NERDCommenterInvert
xmap \\ <Plug>NERDCommenterInvert
nmap q; q:
vmap <silent> g/ y/<C-R>=substitute(escape(@", '\\/.*$^~[]'), '\n', '\\n', 'g')<CR><CR>
nmap <leader><space> i<space><esc>
nmap VV 0v$h
nmap <left> :bp<cr>
nmap <right> :bn<cr>
nmap <leader>X <c-w><c-h>:set winwidth=80<cr><c-w><c-l>:set winwidth=31<cr><c-w><c-h>
nmap gff <C-w>gf
imap (( ()
imap <c-space> <right>
nmap <leader>- i<space><esc>vs-2lxi
nmap <leader>+ :cd %:p:h <bar> new<space>
imap <C-e> <esc>$a
imap <C-a> <esc>0i
imap <C-b> <esc>ha
imap <C-f> <esc>la
imap <C-d> <right><bs>
imap <silent> <C-BS> <esc>bvec
cmap <C-BS> <c-w>
nmap [2 :diffget //2<cr>
nmap ]3 :diffget //3<cr>
nmap <leader>r :R
nmap Y y$
vmap <leader>rv :call ExtractVariable()<cr>
nmap <leader>ri :call InlineVariable()<cr>
nmap <leader>/# /^ *#<cr>
nmap <leader>/f /^ *def\><cr>
nmap <leader>/c /^ *class\><cr>
nmap <leader>/i /^ *if\><cr>
nmap <leader>df d/\(^ *def\>\)\\|\%$<cr>
nmap <leader>a= :Tabularize /=<CR>
vmap <leader>a= :Tabularize /=<CR>
nmap <leader>a: :Tabularize /:\zs<CR>
vmap <leader>a: :Tabularize /:\zs<CR>
nmap <leader>a :Tabularize /
vmap <leader>a :Tabularize /
nmap <leader>= G=gg<c-o><c-o>
nmap <leader>h :help <c-r>=expand("<cword>")<cr><cr>
vmap <leader>h "ry:help<space><c-r>r<cr>
nmap <C-cr> <esc>yyp
imap <S-cr> <esc>$o
nmap <C-S-cr> d$O<esc>p0x
nmap <leader>q :bd<cr>
nmap <c-h> <c-w><c-h>
nmap <c-j> <c-w><c-j>
nmap <c-k> <c-w><c-k>
nmap <c-l> <c-w><c-l>
nmap <leader>R :QuickRun<cr>
nmap <leader>D :NERDTree<cr>
imap <C-right> <space>=><space>
imap <C-;> <space>=><space>
imap <c-]> <space>=><space>
cnoremap %% <C-R>=expand('%:h').'/'<cr>
cnoremap %& <C-R>=expand('%:p')<cr>
nmap gV `[v`]
nmap \v /\v
nmap <S-right> g,
nmap <S-left> g;

function! YRRunAfterMaps()
  nmap Y   :<C-U>YRYankCount 'y$'<CR>
  nmap . .`[
endfunction

function! s:VSetSearch()
  let temp = @@
  norm! gvy
  let @/ = '\V' . substitute(escape(@@, '\'), '\n', '\\n', 'g')
  let @@ = temp
endfunction
vmap * :<C-u>call <SID>VSetSearch()<CR>//<CR>
vmap # :<C-u>call <SID>VSetSearch()<CR>??<CR>

nmap <leader>gr :topleft :split config/routes.rb<cr>
function! ShowRoutes()
  topleft 100 :split __Routes__
  set buftype=nofile
  normal 1GdG
  0r! rake -s routes
  exec ":normal " . line("$") . "_ "
  normal 1GG
  normal dd
endfunction
nmap <leader>gR :call ShowRoutes()<cr>

nmap <leader>gv :CommandTFlush<cr>\|:CommandT app/views<cr>
nmap <leader>gc :CommandTFlush<cr>\|:CommandT app/controllers<cr>
nmap <leader>gu :CommandTFlush<cr>\|:CommandT test/unit<cr>
nmap <leader>gF :CommandTFlush<cr>\|:CommandT test/functional<cr>
nmap <leader>gt :CommandTFlush<cr>\|:CommandT test<cr>
nmap <leader>gm :CommandTFlush<cr>\|:CommandT app/models<cr>
nmap <leader>gh :CommandTFlush<cr>\|:CommandT app/helpers<cr>
nmap <leader>gl :CommandTFlush<cr>\|:CommandT lib<cr>
nmap <leader>gp :CommandTFlush<cr>\|:CommandT public<cr>
nmap <leader>gs :CommandTFlush<cr>\|:CommandT public/stylesheets<cr>
nmap <leader>gS :CommandTFlush<cr>\|:CommandT spec<cr>
nmap <leader>gg :topleft 100 :split Gemfile<cr>
nmap <leader>gf :CommandT %%/<cr>
nmap ;; :CommandTFlush<cr>:CommandT<cr>
nmap ;' :CommandTFlush<cr>:CommandTBuffer<cr>
nmap <leader><leader> <C-^>

nmap <expr> <cr> &bt == "quickfix" ? "\<cr>" : ":nohlsearch<cr>"

if exists('g:loaded_camelcasemotion') && g:loaded_camelcasemotion == 1
  map <silent> w <Plug>CamelCaseMotion_w
  map <silent> b <Plug>CamelCaseMotion_b
  map <silent> e <Plug>CamelCaseMotion_e
endif

function! Preserve(command)
  let _s=@/
  let l = line(".")
  let c = col(".")
  execute a:command
  let @/=_s
  call cursor(l, c)
endfunction

nmap _$ :call Preserve("%s/\\s\\+$//e")<CR>
nmap _= :call Preserve("normal gg=G")<CR>

function! Titlecase()
  if !executable("toTitleCase")
    echo "Missing toTitleCase excutable."
    return
  endif
  normal gv"xy
  let @x = system('echo "'.@x.'"| toTitleCase | tr -d "\n"')
  let @x = substitute(@x, '^\s*\(.\{-}\)\s*$', '\1', '')
  normal gv
  normal "xp
endfunction
vmap <leader>t :call Titlecase()<CR>

function! CopyPath()
    let @*=expand('%')
endfunction
nmap <leader>% :call CopyPath()<CR>

imap <C-O> <C-X><C-O>
imap <expr> <C-l>     pumvisible() ? "\<C-p>" : "\<C-p>"
nmap <leader>x :sp <C-R>=expand("%:h")<cr>/

function! InsertTabWrapper()
  let col = col('.') - 1
  if !col || getline('.')[col - 1] !~ '\k'
    return "\<tab>"
  else
    return "\<c-p>"
  endif
endfunction
imap <tab> <c-r>=InsertTabWrapper()<cr>
imap <s-tab> <c-n>

