- name: current user
  debug: msg="{{ lookup('env','USER') }}"
- name: home dir
  debug: msg="{{ ansible_env.HOME }}"
- name: playbook dir
  debug: msg="{{ playbook_dir }}"
- name: install packages
  become: yes
  yay:
    name:
      - cronie
      - zsh
      - docker
      - docker-compose
      - snapd
      - ripgrep
      - xsel
      - libnotify
      - mergerfs
      - snapraid
      - samba
      - libzen
      - libmediainfo
      - filebot
- name: make zsh default shell
  shell: chsh -s /bin/zsh tj
  tags: shellchange
  become: true
- name: start docker service
  service:
    name: docker
    state: started
  become: true
- name: use emacs keybinds
  lineinfile:
    dest: "{{ item.file }}"
    regexp: "{{ item.line }}"
    line: "{{ item.line }}"
    state: present
    create: yes
  with_items:
    - { line: 'gtk-key-theme-name="Emacs"', file: "{{ ansible_env.HOME }}/.gtkrc-2.0" }
    - { line: 'gtk-key-theme-name=Emacs', file: "{{ ansible_env.HOME }}/.config/gtk-3.0/settings.ini" }  
- name: find dotfiles
  find:
    paths: "{{ playbook_dir }}"
    hidden: true
    excludes: ".config"
    file_type: any
  register: dotfiles
- name: install dotfiles
  file:
    src: "{{ item.path }}"
    dest: "{{ ansible_env.HOME }}/{{ item.path | basename }}"
    state: link
    force: true
  with_items: "{{ dotfiles.files }}"
- name: find homedir symlinks
  find:
    paths: "{{ sync_dir }}"
    hidden: true
    file_type: any
    excludes:
      - ".stfolder"
  register: homedirs
  when: sync_dir != ""
- name: install homedir symlinks
  file:
    src: "{{ item.path }}"
    dest: "{{ ansible_env.HOME }}/{{ item.path | basename }}"
    state: link
    force: true
  with_items: "{{ homedirs.files }}"
  when: sync_dir != ""  
- name: copy etc files
  become: true
  copy:
    src: "{{ item.src }}"
    dest: "{{ item.dest }}"
  with_items:
    - { src: etc/smb.conf, dest: "/etc/samba/smb.conf" }
    - { src: etc/snapraid.conf, dest: "/etc/snapraid.conf" }
    - { src: etc/snapraid-runner.conf, dest: "/etc/snapraid-runner.conf" }
- name: create smb directory
  become: true
  file:
    path: /usr/local/samba/var/
    state: directory
    mode: 0705
- name: create smb log
  become: true
  file:
    path: /usr/local/samba/var/log.smbd
    state: touch
    mode: 0604
- name: enable and run smb service
  become: true
  systemd:
    state: started
    name: smb
    enabled: yes
- name: enable and run sshd
  become: true
  systemd:
    state: started
    enabled: yes
    name: sshd
- name: clone snapraid-runner
  become: true
  git:
    dest: /opt/snapraid-runner
    repo: "https://github.com/Chronial/snapraid-runner.git"
    clone: yes
    update: yes
  
# mounts
- name: mount data-001
  become: true
  ansible.posix.mount:
    fstype: ext4
    state: mounted
    path: /mnt/data-001
    src: UUID=9fe8f423-fa77-4e92-a69d-13130e3c9f14
    opts: noatime
    passno: "2"
- name: mount parity-001
  become: true
  ansible.posix.mount:
    fstype: ext4
    state: mounted
    path: /mnt/parity-001
    src: UUID=85f3b874-edec-47df-94cc-5a40e119e91a
    opts: noatime
    passno: "2"
- name: data mergerfs
  become: true
  ansible.posix.mount:
    fstype: fuse.mergerfs
    path: /mnt/data
    state: present
    src: "/mnt/data-*"
    opts: defaults,use_ino,cache.files=partial,dropcacheonclose=true,allow_other,category.create=mfs,fsname=mergerfs
    passno: "0"

# filebot
- name: filebot license
  shell: "filebot --license /mnt/data/Bak/FileBot_License.psm"

- name: filebot movie cron job
  cron:
    name: "filebot movies"
    job: "/bin/filebot -r -rename /mnt/data/Downloads/Completed --output /mnt/data --conflict auto --format '{plex}' --action move --order Airdate --apply refresh --db TheMovieDB --lang en --log all"
- name: filebot tv cron job
  cron:
    name: "filebot tv"
    job: "/bin/filebot -r -rename /mnt/data/Downloads/Completed --output /mnt/data --conflict auto --format '{plex}' --action move --order Airdate --apply refresh --db TheTVDB --lang en --log all"

# microk8s
- name: install microk8s
  become: true
  community.general.snap:
    name: microk8s
    classic: yes
- name: set up microk8s
  become: true
  shell: "{{ item }}"
  with_items:
    - /snap/bin/microk8s.enable dns helm3 ingress registry storage gpu

- name: create .kube directory
  file:
    state: directory
    path: "{{ ansible_env.HOME }}/.kube"
- name: configure kubectl
  become: true
  shell: /snap/bin/microk8s config > "{{ ansible_env.HOME }}/.kube/config"
- name: change .kube owner
  become: true
  ansible.builtin.file:
    owner: "{{ lookup('env','USER') }}"
    group: "{{ lookup('env','USER') }}"
    path: "{{ ansible_env.HOME }}/.kube"
    
# cert-manager
- name: add jetstack helm repo
  community.kubernetes.helm_repository:
    name: jetstack
    repo_url: https://charts.jetstack.io
    binary_path: "/snap/bin/microk8s.helm3"
- name: create cert-manager namespace
  community.kubernetes.k8s:
    name: cert-manager
    api_version: v1
    kind: Namespace
    state: present
    wait: yes
- name: install cert-manager chart
  community.kubernetes.helm:
    update_repo_cache: yes
    name: cert-manager    
    release_namespace: cert-manager
    chart_ref: jetstack/cert-manager
    chart_version: v1.1.0
    wait: yes
    force: true
    values: "{{ lookup('file', 'k8s/cert-manager-values.yaml') | from_yaml }}"
    binary_path: "/snap/bin/microk8s.helm3"
- name: create cert-manager clouddns secret
  community.kubernetes.k8s:
    state: present
    src: k8s/clouddns-svc-acct-secret.yaml
    wait: yes
- name: create cert-manager lets encrypt issuer
  community.kubernetes.k8s:
    state: present
    src: k8s/issuer.yaml
    wait: yes
- name: add bitnami helm repo
  community.kubernetes.helm_repository:
    name: bitnami
    repo_url: https://charts.bitnami.com/bitnami
    binary_path: "/snap/bin/microk8s.helm3"

# homelab
- name: create homelab k8s namespace
  community.kubernetes.k8s:
    state: present
    api_version: v1
    kind: Namespace
    name: homelab
    wait: yes

- name: create dns service secret
  community.kubernetes.k8s:
    state: present
    src: k8s/external-dns-svc-acct-secret.yaml
    wait: yes

- name: create lets encrypt issuer
  community.kubernetes.k8s:
    state: present
    src: k8s/issuer.yaml
    wait: yes

- name: install external-dns helm chart
  community.kubernetes.helm:
    update_repo_cache: yes
    name: external-dns
    chart_ref: bitnami/external-dns
    chart_version: 4.5.1
    release_namespace: homelab
    values: "{{ lookup('file', 'k8s/external-dns-config.yaml') | from_yaml }}"
    binary_path: "/snap/bin/microk8s.helm3"
    wait: yes

- name: create homelab services
  community.kubernetes.k8s:
    state: present
    src: k8s/main.yaml
    wait: yes
